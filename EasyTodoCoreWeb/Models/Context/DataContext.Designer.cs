//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2017/09/05 23:31:06
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace CoreContext
{

    [DatabaseAttribute(Name = "test")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class CoreDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(CoreDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertTodoDetailData(TodoDetailData instance);
        partial void UpdateTodoDetailData(TodoDetailData instance);
        partial void DeleteTodoDetailData(TodoDetailData instance);

        #endregion

        public CoreDataContext() :
        base(@"User Id=ruser;Password=rpass;Host=192.168.52.128;Database=test;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public CoreDataContext(MappingSource mappingSource) :
        base(@"User Id=ruser;Password=rpass;Host=192.168.52.128;Database=test;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public CoreDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CoreDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CoreDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CoreDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<TodoDetailData> TodoDetailDatas
        {
            get
            {
                return this.GetTable<TodoDetailData>();
            }
        }
    }
}

namespace CoreContext
{

    /// <summary>
    /// There are no comments for CoreContext.TodoDetailData in the schema.
    /// </summary>
    [Table(Name = @"public.todo_detail_data")]
    public partial class TodoDetailData : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserId;

        private int _DataId;

        private string _Title;

        private string _Detail;

        private System.Nullable<System.DateTime> _StartDate;

        private System.Nullable<System.DateTime> _EndDate;

        private System.Nullable<int> _State;

        private System.Nullable<int> _ColorId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnDataIdChanging(int value);
        partial void OnDataIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnDetailChanging(string value);
        partial void OnDetailChanged();
        partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnEndDateChanged();
        partial void OnStateChanging(System.Nullable<int> value);
        partial void OnStateChanged();
        partial void OnColorIdChanging(System.Nullable<int> value);
        partial void OnColorIdChanged();
        #endregion

        public TodoDetailData()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataId in the schema.
        /// </summary>
        [Column(Name = @"data_id", Storage = "_DataId", CanBeNull = false, DbType = "INT4 NOT NULL", IsPrimaryKey = true)]
        public int DataId
        {
            get
            {
                return this._DataId;
            }
            set
            {
                if (this._DataId != value)
                {
                    this.OnDataIdChanging(value);
                    this.SendPropertyChanging("DataId");
                    this._DataId = value;
                    this.SendPropertyChanged("DataId");
                    this.OnDataIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging("Title");
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Detail in the schema.
        /// </summary>
        [Column(Name = @"detail", Storage = "_Detail", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Detail
        {
            get
            {
                return this._Detail;
            }
            set
            {
                if (this._Detail != value)
                {
                    this.OnDetailChanging(value);
                    this.SendPropertyChanging("Detail");
                    this._Detail = value;
                    this.SendPropertyChanged("Detail");
                    this.OnDetailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Name = @"start_date", Storage = "_StartDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging("StartDate");
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Name = @"end_date", Storage = "_EndDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging("EndDate");
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for State in the schema.
        /// </summary>
        [Column(Name = @"""state""", Storage = "_State", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging("State");
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ColorId in the schema.
        /// </summary>
        [Column(Name = @"color_id", Storage = "_ColorId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ColorId
        {
            get
            {
                return this._ColorId;
            }
            set
            {
                if (this._ColorId != value)
                {
                    this.OnColorIdChanging(value);
                    this.SendPropertyChanging("ColorId");
                    this._ColorId = value;
                    this.SendPropertyChanged("ColorId");
                    this.OnColorIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
